// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum UserRoles {
  ADMIN
  PLAYLIST_ADMIN
  USER
}

enum UserAuthTypes {
  CREDENTIALS
  GOOGLE
  GITHUB
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Languages {
  C
  CPP
  JAVA
  PYTHON
  JAVASCRIPT
}

enum ResultStatus {
  ACCEPTED
  WRONG_ANSWER
  RUNTIME_ERROR
  MEMORY_LIMIT_EXCEEDED
  TIME_LIMIT_EXCEEDED
}

model User {
  id                      String           @id @default(uuid())
  fullname                String?
  email                   String           @unique
  username                String           @unique
  password                String
  avatar                  Json?
  role                    UserRoles        @default(USER)
  loginType               UserAuthTypes    @default(CREDENTIALS)
  isEmailVerified         Boolean?
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  forgotPasswordToken     String?
  forgotPasswordExpiry    DateTime?
  refreshToken            String?
  createdProblems         Problem[]
  submissions             Submission[]
  playlists               Playlist[]
  solvedProblems          SolvedProblems[]
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
}

model Problem {
  id                 String             @id @default(uuid())
  createdById        String
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  hints              String[]
  editorial          String?
  examples           Json[]
  attachments        Json[]
  constraints        String[]
  testCases          Json[]
  preCodeSnippets    Json[]
  referenceSolutions Json[]
  submissions        Submission[]
  partOfPlaylists    PlaylistProblems[]
  solvedBy           SolvedProblems[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  createdBy User @relation(fields: [createdById], references: [id])

  @@index([createdById])
}

model Submission {
  id              String           @id @default(uuid())
  submittedById   String
  problemId       String
  language        Languages
  submittedCode   String
  status          ResultStatus
  stdin           String?
  stdout          String?
  stderr          String?
  compileOutput   String?
  time            Float?
  memory          Float?
  testCaseResults TestCaseResult[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  submittedBy User    @relation(fields: [submittedById], references: [id], onDelete: Cascade)
  problem     Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@index([submittedById])
  @@index([problemId])
}

model TestCaseResult {
  id            String       @id @default(uuid())
  submissionId  String
  testCaseId    String
  isPassed      Boolean
  status        ResultStatus
  output        String
  stdout        String?
  stderr        String?
  compileOutput String?
  time          Float?
  memory        Float?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([testCaseId])
}

model TestCase {
  id             String   @id @default(uuid())
  problemId      String
  input          String
  expectedOutput String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([problemId, input])
}

model SolvedProblems {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
  @@index([userId])
  @@index([problemId])
}

model Playlist {
  id          String             @id @default(uuid())
  name        String
  desciption  String?
  createdById String
  problems    PlaylistProblems[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  createdBy User @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@unique([name, createdById])
}

model PlaylistProblems {
  id         String   @id @default(uuid())
  playlistId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
  @@index([playlistId])
  @@index([problemId])
}
